set nocompatible
set modelines=0
set nobackup nowritebackup noswapfile viminfo=
set notitle showmode showcmd number ruler
" set lazyredraw
set noerrorbells visualbell t_vb=
set pastetoggle=<F11>
set wildmenu
set complete+=k
set backspace=indent,eol,start
set encoding=utf8
set ttyfast
set ttymouse=xterm2

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'

Bundle 'Align'
Bundle 'Lokaltog/vim-powerline'
Bundle 'gnupg.vim'
Bundle 'localvimrc'
Bundle 'tpope/vim-afterimage'
Bundle 'tpope/vim-commentary'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-surround'
Bundle 'vimwiki'

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" function! VimwikiLinkHandler(link)
"   try
"     execute 'silent !xdg-open '.a:link
"     return 1
"   catch
"     echo 'Error opening URL!'
"   endtry
"   return 0
" endfunction

let g:vimwiki_list = [{'path': '~/data/vimwiki'}]

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

filetype plugin indent on

set spelllang=en

let mapleader = ","

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

map <leader>ev :tabedit ~/.vimrc<cr>
map <leader>sv :source ~/.vimrc<CR>

imap jj <ESC>
nmap <silent> <leader>ss :setlocal spell!<CR>

nmap <silent> <F1> :Explore<CR>
nmap <silent> <F2> :Sexplore<CR>

nmap <silent> <F6> :bp<CR>
nmap <silent> <F7> :bn<CR>

nmap <silent> <F12> :noh<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

set mouse=a " just for scroll wheel. can still do normal term copying by holding shift

function! BrianToggleMouse()
  if &mouse == 'a'
    set mouse=
    echo "Mouse OFF"
  else
    set mouse=a
    echo "Mouse ON"
  endif
endfunction

nmap <F12> :call BrianToggleMouse()<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

function! BrianReplaceWord(word0, word1)
  let l:pos = getpos(".")
  exec "%s/\\<" . a:word0 . "\\>/" . a:word1 . "/g"
  call setpos('.', l:pos)
endfunction

nmap <F4> :call BrianReplaceWord("<C-r><C-w>", "")<Left><Left>

function! BrianWinDoReplaceWord(word0, word1)
  let l:pos = getpos(".")
  exec "windo %s/\\<" . a:word0 . "\\>/" . a:word1 . "/g"
  call setpos('.', l:pos)
endfunction

nmap <F5> :call BrianWinDoReplaceWord("<C-r><C-w>", "")<Left><Left>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

function! BrianRemoveTrailingWhitespace()
  let l:pos = getpos(".")
  exec "%s/\\s\\+$//e"
  call setpos('.', l:pos)
endfunction

" XXX conflicts with vimwiki
" nmap <silent> <leader>ws :call BrianRemoveTrailingWhitespace()<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" nnoremap <silent> <F10> :call <SID>SearchMode()<CR>
" function s:SearchMode()
"   if !exists('s:searchmode') || s:searchmode == 0
"     echo 'Search next: scroll hit to middle if not on same page'
"     nnoremap <silent> n n:call <SID>MaybeMiddle()<CR>
"     nnoremap <silent> N N:call <SID>MaybeMiddle()<CR>
"     let s:searchmode = 1
"   elseif s:searchmode == 1
"     echo 'Search next: scroll hit to middle'
"     nnoremap n nzz
"     nnoremap N Nzz
"     let s:searchmode = 2
"   else
"     echo 'Search next: normal'
"     nunmap n
"     nunmap N
"     let s:searchmode = 0
"   endif
" endfunction

" " If cursor is in first or last line of window, scroll to middle line.
" function s:MaybeMiddle()
"   if winline() == 1 || winline() == winheight(0)
"     normal! zz
"   endif
" endfunction

nmap n nzz
nmap p pzz

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

let g:netrw_list_hide = "^\\..*$"

set laststatus=2
let g:obviousModeInsertHi = "term=reverse ctermfg=15 ctermbg=18"

syntax on

if &t_Co < 256
  colorscheme fnaqevan
else
  colorscheme jellybeans_b
  set cursorline
endif

if exists('&colorcolumn')
  set colorcolumn=+1
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

"highlight Search guifg=NONE ctermfg=NONE gui=none cterm=none
highlight SpellBad ctermbg=17 ctermfg=15
highlight SpellCap ctermbg=17 ctermfg=15

set autoindent smartindent
set shiftwidth=2 tabstop=2 expandtab
set nowrap

"set list listchars=tab:»·

set cinoptions =:0  " don't indent 'case' in 'switch'
set cinoptions+=ls  " regular alignment of {} in 'case'
set cinoptions+=(s  " regular indentation after trailing (
set cinoptions+=m1  " deindent closing )

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

let g:wserrorColor = 'ctermbg=52'

autocmd FileType c,css,haskell,html,java,javascript,lua,mail,ruby,sh,text,vim,xml,zsh WSErrorHighlight0
autocmd FileType make WSErrorHighlight1

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>="
